openapi: 3.0.3
info:
  title: Jibril API
  description: API for managing events, issues, and other features associated with the Jibril agent.
  version: 1.0.0
  license:
    name: Proprietary
    url: "https://www.listen.dev"
servers:
  - url: "https://core-staging.listen.dev"
    description: Staging server
  - url: "https://core-dev.listen.dev"
    description: Development server
  - url: "https://core.listen.dev"
    description: Production server
paths:
  /api/v1/events:
    put:
      security:
        - BearerAuth: []
      summary: Send the event to the server, this can result in update or create.
      operationId: ingestEvent
      requestBody:
        description: Event object that needs to be ingested
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "201":
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IngestedEvent"
        "202":
          description: Event updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IngestedEvent"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
  
  /api/v1/agents/{id}:
    get:
      security:
        - BearerAuth: []
      summary: Get agent by ID
      operationId: getAgentById
      parameters:
        - name: id
          in: path
          description: ID of agent to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Agent found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Agent"
        "404":
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
    delete:
      security:
        - BearerAuth: []
      summary: Delete agent by ID
      operationId: deleteAgentById
      parameters:
        - name: id
          in: path
          description: ID of agent to delete
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Agent deleted
        "404":
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
    patch:
      security:
        - BearerAuth: []
      summary: Update agent fields by ID
      operationId: updateAgentById
      parameters:
        - name: id
          in: path
          description: ID of agent to update
          required: true
          schema:
            type: string
      requestBody:
        description: Agent object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAgent"
      responses:
        "200":
          description: Agent updated successfully
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
  
  /api/v1/agents:
    post:
      security:
        - BearerAuth: []
      summary: Create a new agent
      operationId: createAgent
      requestBody:
        description: Agent object that needs to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAgent"
      responses:
        "201":
          description: Agent created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentCreated"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
    get:
      security:
        - BearerAuth: []
      summary: Query agents returning list of agents
      operationId: listAgents
      parameters:
      - name: filters
        in: query
        description: Filters for querying agents
        required: false
        style: form
        explode: true
        schema:
          $ref: "#/components/schemas/AgentFilters"

      - name: labels
        in: query
        description: Labels for querying agents
        required: false
        style: form
        explode: true
        schema:
          type: object
        example:
          label.mylabel: value1

      - name: first
        in: query
        description: Number of items to return from the start
        required: false
        schema:
          type: integer
          minimum: 1

      - name: after
        in: query
        description: Cursor for paginating forward
        required: false
        schema:
          type: string

      - name: last
        in: query
        description: Number of items to return from the end
        required: false
        schema:
          type: integer
          minimum: 1

      - name: before
        in: query
        description: Cursor for paginating backward
        required: false
        schema:
          type: string
      responses:
        "200":
          description: Object with list of agents and pagination
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Page"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
  
  /api/v1/issues:
    post:
      security:
        - BearerAuth: []
      summary: Create a new issue
      operationId: createIssue
      requestBody:
        description: Issue object that needs to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIssue"
      responses:
        "201":
          description: Issue created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssueCreated"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
    get:
      security:
        - BearerAuth: []
      summary: Query issues returning list of issues
      operationId: listIssues
      parameters:
        - name: filter.class
          in: query
          description: Filter issues by class (network_exfiltration, crypto_miner)
          required: false
          schema:
            $ref: "#/components/schemas/IssueClass"
        
        - name: filter.state
          in: query
          description: Filter issues by state
          required: false
          schema:
            $ref: "#/components/schemas/IssueState"
        
        - name: filter.priority
          in: query
          description: Filter issues by priority
          required: false
          schema:
            $ref: "#/components/schemas/IssuePriority"
        
        - name: filter.agent_kind
          in: query
          description: Filter issues by agent kind
          required: false
          schema:
            $ref: "#/components/schemas/AgentKind"
        
        - name: label.*
          in: query
          description: Labels for querying issues (e.g., label.severity=high)
          required: false
          style: form
          explode: true
          schema:
            type: object
          example:
            label.severity: high
            label.type: bug
        
        - name: first
          in: query
          description: Number of items to return from the start
          required: false
          schema:
            type: integer
            minimum: 1
        
        - name: after
          in: query
          description: Cursor for paginating forward
          required: false
          schema:
            type: string
        
        - name: last
          in: query
          description: Number of items to return from the end
          required: false
          schema:
            type: integer
            minimum: 1
        
        - name: before
          in: query
          description: Cursor for paginating backward
          required: false
          schema:
            type: string
      
      responses:
        "200":
          description: Object with list of issues and pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Issue"
                  pageInfo:
                    $ref: "#/components/schemas/PageInfo"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /api/v1/issues/{id}:
    get:
      security:
        - BearerAuth: []
      summary: Get issue by ID
      operationId: getIssueById
      parameters:
        - name: id
          in: path
          description: ID of issue to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Issue found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Issue"
        "400":
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Issue not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
    
    delete:
      security:
        - BearerAuth: []
      summary: Delete issue by ID
      operationId: deleteIssueById
      parameters:
        - name: id
          in: path
          description: ID of issue to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Issue deleted
        "400":
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Issue not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
    
    patch:
      security:
        - BearerAuth: []
      summary: Update issue fields by ID
      operationId: updateIssueById
      parameters:
        - name: id
          in: path
          description: ID of issue to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Issue fields that need to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateIssue"
      responses:
        "200":
          description: Issue updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssueUpdated"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Issue not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
  
  /healthz:
    get:
      security: []
      summary: Health check endpoint
      operationId: healthCheck
      responses:
        "200":
          description: Service is healthy
        "404":
          description: Service not found
        "500":
          description: Service is unhealthy

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          example: "invalid event kind"
    
    IngestedEvent:
      type: object
      properties:
        id:
          type: string
    
    Event:
      type: object
      required:
        - id
        - kind
      properties:
        id:
          type: string
        agent_id:
          type: string
        data:
          $ref: "#/components/schemas/Data"
        kind:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    DroppedIP:
      type: object
      properties:
        ip_version:
          type: integer
        proto:
          type: string
        service_port:
          type: integer
        icmp:
          type: object
          properties:
            type:
              type: string
            code:
              type: string
        local:
          $ref: "#/components/schemas/Node"
        remote:
          $ref: "#/components/schemas/Node"
        properties:
          $ref: "#/components/schemas/Properties"
    
    GitHubContext:
      type: object
      required:
        - job
        - run_id
        - workflow
      properties:
        id:
          type: string
          description: This unique ID is generated by API, so it is possible to leave blank.
        action:
          type: string
        actor:
          type: string
        actor_id:
          type: string
        event_name:
          type: string
        job:
          type: string
        ref:
          type: string
        ref_name:
          type: string
        ref_protected:
          type: boolean
        ref_type:
          type: string
        repository:
          type: string
        repository_id:
          type: string
        repository_owner:
          type: string
        repository_owner_id:
          type: string
        run_attempt:
          type: string
        run_id:
          type: string
        run_number:
          type: string
        runner_arch:
          type: string
        runner_os:
          type: string
        server_url:
          type: string
        sha:
          type: string
        triggering_actor:
          type: string
        workflow:
          type: string
        workflow_ref:
          type: string
        workflow_sha:
          type: string
        workspace:
          type: string
        created_at:
          type: string
        update_at:
          type: string
    
    Data:
      type: object
      properties:
        dropped:
          $ref: "#/components/schemas/DroppedIP"
          nullable: true
        process:
          $ref: "#/components/schemas/Process"
          nullable: true
        parent:
          $ref: "#/components/schemas/Process"
          nullable: true
        flow:
          $ref: "#/components/schemas/Flow"
          nullable: true
        full_info:
          $ref: "#/components/schemas/FullInfo"
          nullable: true
        resolve:
          type: string
          nullable: true
        resolve_flow:
          $ref: "#/components/schemas/Flow"
          nullable: true
        head:
          $ref: "#/components/schemas/EventHead"
          nullable: true
        note:
          type: string
          nullable: true
    
    FullInfo:
      type: object
      properties:
        files:
          type: object
          additionalProperties:
            type: object
        flows:
          type: array
          items:
            $ref: "#/components/schemas/FlowSimple"
        ancestry:
          type: array
          items:
            $ref: "#/components/schemas/Process"
    
    FlowSimple:
      type: object
      properties:
        ip_version:
          type: integer
        proto:
          type: string
        service_port:
          type: integer
        icmp:
          $ref: "#/components/schemas/ICMP"
        local:
          $ref: "#/components/schemas/Node"
        remote:
          $ref: "#/components/schemas/Node"
        settings:
          $ref: "#/components/schemas/Settings"
    
    Flow:
      type: object
      properties:
        ip_version:
          type: integer
        proto:
          type: string
        service_port:
          type: integer
        icmp:
          $ref: "#/components/schemas/ICMP"
        local:
          $ref: "#/components/schemas/Node"
        remote:
          $ref: "#/components/schemas/Node"
        properties:
          $ref: "#/components/schemas/Properties"
        settings:
          $ref: "#/components/schemas/Settings"
    
    Settings:
      type: object
      properties:
        direction:
          type: string
        initiated_by:
          type: string
        status:
          type: string
        ended_by:
          type: string
    
    Properties:
      type: object
      properties:
        ingress:
          type: boolean
        egress:
          type: boolean
        incoming:
          type: boolean
        outgoing:
          type: boolean
        started:
          type: boolean
        ongoing:
          type: boolean
        ended:
          type: boolean
        terminator:
          type: boolean
        terminated:
          type: boolean
    
    ICMP:
      type: object
      properties:
        code:
          type: string
        type:
          type: string
    
    Node:
      type: object
      properties:
        address:
          type: string
        name:
          type: string
        names:
          type: array
          items:
            type: string
        port:
          type: integer
    
    Process:
      type: object
      properties:
        start:
          type: string
        exit:
          type: string
        retcode:
          type: integer
        uid:
          type: integer
        pid:
          type: integer
        ppid:
          type: integer
        comm:
          type: string
        cmd:
          type: string
        exe:
          type: string
        args:
          type: string
        loader:
          type: string
        prev_exe:
          type: string
        prev_args:
          type: string
        prev_loader:
          type: string
    
    EventHead:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        format:
          type: string
        description:
          type: string
        documentation:
          type: string
        category:
          type: string
        mechanism:
          type: string
        method:
          type: string
        importance:
          type: string
    
    AgentKind:
      type: string
      enum:
        - github
        - kubernetes
    
    AgentLabels:
      type: object
      additionalProperties:
        type: string
    
    AgentKubernetesContext:
      type: object
      required:
        - cluster
        - namespace
      properties:
        cluster:
          type: string
        namespace:
          type: string
    
    Agent:
      type: object
      properties:
        id:
          type: string
        project_id:
          type: string
        os:
          type: string
        arch:
          type: string
        hostname:
          type: string
        version:
          type: string
        ip:
          type: string
        machine_id:
          type: string
        labels:
          $ref: "#/components/schemas/AgentLabels"
        kind:
          $ref: "#/components/schemas/AgentKind"
        github_context:
          $ref: "#/components/schemas/GitHubContext"
        kubernetes_context:
          $ref: "#/components/schemas/AgentKubernetesContext"
        active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    
    CreateAgent:
      type: object
      required:
        - os
        - arch
        - hostname
        - version
        - ip
        - machine_id
        - kind
      properties:
        os:
          type: string
        arch:
          type: string
        hostname:
          type: string
        version:
          type: string
        ip:
          type: string
          format: ipv4
        machine_id:
          type: string
        labels:
          $ref: "#/components/schemas/AgentLabels"
        kind:
          $ref: "#/components/schemas/AgentKind"
        github_context:
          $ref: "#/components/schemas/GitHubContext"
        kubernetes_context:
          $ref: "#/components/schemas/AgentKubernetesContext"
    
    UpdateAgent:
      type: object
      properties:
        os:
          type: string
          nullable: true
        arch:
          type: string
          nullable: true
        hostname:
          type: string
          nullable: true
        version:
          type: string
          nullable: true
        ip:
          type: string
          format: ipv4
          nullable: true
        machine_id:
          type: string
          nullable: true
    
    AgentCreated:
      type: object
      required:
        - agent_token
        - agent_id
      properties:
        agent_token:
          type: string
        agent_id:
          type: string
    
    Page:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            description: Generic item
        pageInfo:
          $ref: '#/components/schemas/PageInfo'
    
    PageInfo:
      type: object
      properties:
        hasNextPage:
          type: boolean
        endCursor:
          type: string
          nullable: true
        hasPrevPage:
          type: boolean
        startCursor:
          type: string
          nullable: true
    
    AgentFilters:
      type: object
      properties:
        os:
          type: string
          description: Operating system of the agent
        arch:
          type: string
          description: Architecture of the agent (e.g., x86, arm)
        hostname:
          type: string
          description: Hostname of the agent
        version:
          type: string
          description: Version of the agent software
        ip:
          type: string
          format: ipv4
          description: IP address of the agent
        machine_id:
          type: string
          description: Unique machine identifier
        kind:
          $ref: "#/components/schemas/AgentKind"
          description: Kind of agent
    
    # Issue-related schemas
    IssueState:
      type: string
      enum:
        - triaged
        - ignored
        - blocked
    
    IssuePriority:
      type: string
      enum:
        - low
        - medium
        - high
        - critical
    
    IssueClass:
      type: string
      enum:
        - network_exfiltration
        - crypto_miner
    
    IssueLabels:
      type: object
      additionalProperties:
        type: string
      example:
        severity: high
        type: bug
        area: security
    
    Issue:
      type: object
      properties:
        id:
          type: string
          format: uuid
        class:
          $ref: "#/components/schemas/IssueClass"
        description:
          type: string
        state:
          $ref: "#/components/schemas/IssueState"
        priority:
          $ref: "#/components/schemas/IssuePriority"
        labels:
          $ref: "#/components/schemas/IssueLabels"
        ignore_for:
          type: string
          nullable: true
        events:
          type: array
          description: Events associated with this issue
          items:
            $ref: "#/components/schemas/Event"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true
    
    CreateIssue:
      type: object
      required:
        - class
        - description
        - state
        - priority
        - event_ids
      properties:
        class:
          $ref: "#/components/schemas/IssueClass"
        description:
          type: string
        state:
          $ref: "#/components/schemas/IssueState"
        priority:
          $ref: "#/components/schemas/IssuePriority"
        labels:
          $ref: "#/components/schemas/IssueLabels"
        event_ids:
          type: array
          items:
            type: string
            format: uuid
    
    UpdateIssue:
      type: object
      properties:
        class:
          $ref: "#/components/schemas/IssueClass"
          nullable: true
        description:
          type: string
          nullable: true
        state:
          $ref: "#/components/schemas/IssueState"
          nullable: true
        priority:
          $ref: "#/components/schemas/IssuePriority"
          nullable: true
        labels:
          $ref: "#/components/schemas/IssueLabels"
          nullable: true
        ignore_for:
          type: string
          nullable: true
        reason:
          type: string
          description: Reason for state change
          nullable: true
        event_ids:
          type: array
          items:
            type: string
            format: uuid
    
    IssueCreated:
      type: object
      properties:
        id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    
    IssueUpdated:
      type: object
      properties:
        id:
          type: string
          format: uuid
        updated_at:
          type: string
          format: date-time